/---------------------
 -- three.bento
 --
 -- Component for rendering three.js content
 --
 -- Copyright (c) 2013 by Michael St. Hippolyte
 --
 --/
 
site three [=

     
    /--------- THREE_COMPONENT ----------/

    /** Component to display and control a three.js scene.
     *
     *  A three_component is a DOM element that corresponds to a rendering 
     *  canvas.  
     *
     *  There are two scenarios in which this component is called: during
     *  page construction and via ajax.  These correspond to the two 
     *  parameter lists.  When passed a scene, the component constructs it
     *  and keeps it.  When passed a param table, the component processes 
     *  the params and responds with any changes to the kept scene.  Changes 
     *  may include modification of objects in the scene, addition or removal 
     *  of objects, or wholesale replacement of the scene.
     *
     **/ 
   
    component three_component(scene new_scene),(params{}) [=
    
        keep this_camera
        keep this_scene
  
        /--------------------------------/
        /---- overridable properties ----/
        
        /---- required override: subclasses must define this ----/
        canvas_id [?]

        id = canvas_container

        /---- optional overrides ----/
  
        dynamic default_handler_name(event) = canvas_name + "_" + event
        dynamic handle(event) [=
            default_handler_name(event);
            [| (); |]            
        =] 

        sub_script [/]
        sub_funcs [/]

        /---- the three_component is the rendering canvas. ----/
        canvas_name = canvas_id

        /---- subclasses may override these fields to define a fixed size 
         ---- canvas; otherwise the canvas is set to the width and height 
         ---- of the component containing it.
         ----/
        canvas_width [| canvasWidth |]
        canvas_height [| canvasHeight |]
        boolean size_to_window = true

        /---- names of various canvas-related things ----/
        canvas_container = canvas_id + "_container"
        canvas_renderer = canvas_id + "_renderer"
        canvas_scene = canvas_id + "_scene"
        canvas_camera = canvas_id + "_camera"

        /---- subclasses may override this to add additional scripts to the list  ----/
        include_scripts = [ "/js/lib/three.js" ]

        /** if true, an onLoad handler is defined and all the scripts defined by this component
         *  are embedded in the handler.
         **/
        boolean run_scripts_on_load = true

        /-------------------------------/
        /---- global event handling ----/
  
        /** Sets the handler for the event. **/
        dynamic set_handler(script_object element, event, js_function handler),
                                                      (event, js_function handler),
                                                      (event) [=
            newline;
            with (element)  [=
                element.name;
                [| . |]
            =] else [=
                [| window. |]
            =]
            event;
            [| = |]
            with (handler) [=
                handler.name;
            =] else [=
                default_handler_name(event);
            =]
            [| ; |]
        =] 

        dynamic js_function default_handler(event) [=
            name = default_handler_name(event)
            
            [|            
                function [= default_handler_name(event); =](event) {
                    [= body; =]
                }
            |]
        =]            

        /-------------------------------/
        /---------- the scene ----------/

        scene this_scene = new_scene(canvas_width, canvas_height)
        

        /-------------------------------/
        /---------- the camera ---------/

        camera this_camera = this_scene.cam


        /-------------------------------/
        /-------- the renderer ---------/

        webgl_renderer(*) this_renderer(cname, width, height) [=
            super;            
            canvas_container;
            [| .appendChild( |]
            name;
            [| .domElement); |]
        =]


        /-----------------------/
        /------ scripting ------/
        
        scripts [=
            log("instantiating include_scripts");
            for s in include_scripts [|
                <script src="[= s; =]"></script>
            |]
            log("instantiating main_script");
            main_script;
         =]

    
         main_script [=

            log("main_script called with scene " + this_scene.type + " with " + this_scene.objs.count + " objects");
            for three_object o in this_scene.objs [=
                log("   ..." + o.type);
            =]
                    
            [| <script> |]
            
            /-- create the canvas for rendering, and in the process see 
             -- if HTML5 and WebGL are supported
             --/  
            log("create canvas");
            create_canvas;

            /-- declare top-level functions and variables --/
            log("declaring script variables");
            declare;

            if (run_scripts_on_load) [=
                [| function [= default_handler_name("onload"); =]() { |]
            =]
            
            /-- proceed, providing there is webgl --/            
            [| if (webglEnabled) { |]

                [| recalcCanvasSize(); |]

                log("constructing renderer id " + canvas_id + "   width " + canvas_width + "   height " + canvas_height);
                this_renderer(canvas_id, canvas_width, canvas_height);

                /-- construct the scene --/
                log("constructing scene");
                this_scene;

                log("assigning global variables");
                assign_global_vars(this_scene);
                
                log("add scene/subclass scripts");

                /-- let the scene add to the script --/
                if (this_scene.scripts) [=
                    this_scene.scripts;
                =]

                /-- add script defined by subclass, if any --/
                sub_script;

                /-- drop into the rendering loop, from whence we will not return --/
                log("begin rendering loop");
                run;

            /-- no webgl --/
            [| } else { |]
                /-- notify the user and exit --/
                canvas_container;
                [| .innerHTML = "<p><strong>Your hardware or software does not support the graphics capability required by this page.</strong></p>"; |]
            [| } |]

            if (run_scripts_on_load) [=
                [| } |]
                set_handler("onload");
            =]

            [| </script> |]    
        =]

        /** Declare top level variables, including the  variable corresponding to this 
         *  component.
         **/
        declare_global_vars [|
            var [= canvas_container; =] = document.getElementById("[= id; =]");
            var canvasWidth = [= canvas_container; =].clientWidth;
            var canvasHeight = [= canvas_container; =].clientHeight;
            var [= canvas_renderer; =];
            var [= canvas_scene; =];
            var [= canvas_camera; =];
        |]  
        
        assign_global_vars(scene s) [|
            [= canvas_renderer; =] = this_renderer;
            [= canvas_scene; =] = [= this_scene.name; =];
            [= canvas_camera; =] = [= this_camera(s).name; =];

        |]

        update_global_vars(params{}) [=
            cam_pos = canvas_camera + ".position"
                   
            if (params{"camera_x"}) [=
                cam_pos;
                [| .setX( |]
                params{"camera_x"};
                [| ); |]
            =]
            if (params{"camera_x"}) [=
                cam_pos;
                [| .setX( |]
                params{"camera_x"};
                [| ); |]
            =]
            if (params{"camera_x"}) [=
                cam_pos;
                [| .setX( |]
                params{"camera_x"};
                [| ); |]
            =]
       =]       
       
        dynamic resize [=
            resize_canvas;
            this_renderer.set_size(canvas_width, canvas_height);
        =]
        
        dynamic resize_canvas [|
            recalcCanvasSize();
            [= canvas_name; =].style.width = canvasWidth + "px";
            [= canvas_name; =].style.height = canvasHeight + "px";
        |]

        
        
        /** Create the canvas, depending on what kind of graphics support is available on the client. **/
        create_canvas [|
             var [= canvas_name; =] = document.createElement("canvas");
             [= canvas_name; =].id = "[= canvas_id; =]";
             var canvasEnabled = [= canvas_name; =] && !!window.CanvasRenderingContext2D;
             var webglEnabled = [= canvas_name; =] && (
                 function (canvas) { 
                     try {
                         if (!window.WebGLRenderingContext) {
                             return false;
                         }
                         if (canvas.getContext("webgl")) {
                             return true;
                         }
                         if (canvas.getContext("experimental-webgl")) { 
                             return true;
                         }
                     } catch (e) { 
                         return false;
                     }
                 } ([= canvas_name; =]));
        |]
        
                      
        /** Declare functions. **/
        declare [=
            declare_global_vars;
            declare_utils;
            render.declare;
            post_render.declare;                
            animate.declare;

            /-- let the subclass declare functions --/
            sub_funcs;

        =]
        
        
        /** Run the animation. **/
        run [=
            animate;
        =]

        /-- top-level javascript functions for this component --/


        js_function animate [=
            body [|
                requestAnimationFrame(animate);
                [= canvas_name; =]_scene.next_frame();
                render();
                post_render();
            |]
        =]
        
        js_function render [=
            body [=
                canvas_renderer; 
                [| .render( |]
                canvas_scene;
                [| , |]
                canvas_camera;
                [| ); |]
            =]
        =]

        
        js_function post_render [=
            body [/]
        =]
       
        declare_utils [|
        
            function recalcCanvasSize() { 
            [=
                if (size_to_window) [|
                    var x = 0;
                    var y = 0;
                    for (var element = [= canvas_container; =]; element != null; element = element.offsetParent) {
                       x += element.offsetLeft;
                       y += element.offsetTop;
                    }
                    canvasWidth = window.innerWidth - x;
                    canvasHeight = window.innerHeight - y;
                |] else [|
                    canvasWidth = [= canvas_container; =].clientWidth;
                    canvasHeight = [= canvas_container; =].clientHeight;
                |]
            =]
            }

            var debounceTimeOut = null;
            function debounce(func) {
                if (debounceTimeOut != null) {
                    clearTimeout(debounceTimeOut);
                    debounceTimeOut = setTimeout(func, 100);
                }
            }
                      
        |]

        /--------------------------------/
        /---- component construction ----/

        /---- full instantiation ----/
        with (new_scene) [=
            log("instantiating three_component");    
            sub;
            log("instantiating three_component scripts");
            scripts;
            
        /---- respond to ajax call ----/
        =] else with (params) [=
        
        
        =]
    =]

=]
