/---------------------
 -- three_controls.bento
 --
 -- Controls for three.bento
 --
 -- Copyright (c) 2017 by Michael St. Hippolyte
 --
 --/
 
site three [=

    /---- interaction model ----/

    dynamic dom_event(nm) [=
       name = nm
       [| '[= name; =]' |]
    =]
        
    dynamic event_handler [=
        boolean capture = false
        name = "on" + owner.type
        declare [?]
    =]
    
    dynamic event_listener(element, dom_event event, event_handler handler) [=
        [|
            [= element; =].addEventListener([= event; =], [= handler.name; =], [= handler.capture; =]);
        |]            
    =]

    /---- interaction events ----/

    static dom_event("mousedown") MOUSEDOWN [/]
    static dom_event("mouseup")   MOUSEUP   [/]
    static dom_event("mousemove") MOUSEMOVE [/]


    controls [=
    
        declare [?]
        
        event_handler mousedown [?]
        event_handler mouseup [?]
        event_handler mousemove [?]
        
        add_listeners(dom_element) [=
            with (mousedown) [=
                event_listener(dom_element, MOUSEDOWN, mousedown);
            =]
            with (mouseup) [=
                event_listener(dom_element, MOUSEUP, mouseup);
            =]
            with (mousemove) [=
                event_listener(dom_element, MOUSEMOVE, mousemove);
            =]
        
        =]
        
        activate(cam_var) [/]
    
    =]    

    /**
     * drag_controls is a controls object that enables dragging of objects that have the draggable
     * property.
     *
     * Much of the javascript is borrowed from DragControls.js by zz85 / https://github.com/zz85 
     *
     **/
    
    controls drag_controls(id, scene s) [=
        boolean xlock = false
        boolean ylock = false
        boolean zlock = false

        declare [/
            var drag_controls = function( _camera, _objects ) {

                var _domElement = document.getElementById([= id; =]);

                var _raycaster = new THREE.Raycaster();

                var _mouse = new THREE.Vector3(),
                    _offset = new THREE.Vector3();
                var _selected, _hovered;

                var p3subp1 = new THREE.Vector3();
                var targetposition = new THREE.Vector3();
                var zerovector = new THREE.Vector3();

                this.enabled = false;

                /* Custom Event Handling */
                var _listeners = {};

                var me = this;
                this.on = function( event, handler ) {
                    if ( ! _listeners[ event ] ) {
                        _listeners[ event ] = [];
                    }
                    _listeners[ event ].push( handler );
                    return me;
                };

                this.off = function( event, handler ) {
                    var l = _listeners[ event ];
                    if ( !l ) {
                        return me;
                    }
                    if ( l.indexOf( handler ) > - 1 ) {
                        l.splice( handler, 1 );
                    }

                    return me;
                };

                var notify = function( event, data, member ) {
                    var l = _listeners[ event ];
                    if ( !l ) {
                        return;
                    }
 
                    if ( !member ) {
                        for ( var i = 0; i < l.length; i ++ ) {
                            l[ i ]( data );
                        }
                    }
                };

                this.setObjects = function( objects ) {
                    if ( objects instanceof THREE.Scene ) {
                        _objects = objects.children;
                    } else {
                        _objects = objects;
                    }
                };

                this.setObjects( _objects );

                [= mousedown.declare; =]
                [= mouseup.declare; =]
                [= mousemove.declare; =]
            }
        /]



        event_handler mousedown [=
           name = "drag_controls.onmousedown"
           declare [/
               function onmousedown( event ) {
                   event.preventDefault();
                   _mouse.x = ( event.clientX / _domElement.width ) * 2 - 1;
                   _mouse.y = - ( event.clientY / _domElement.height ) * 2 + 1;
                   _raycaster.setFromCamera( _mouse, _camera );
                   var intersects = _raycaster.intersectObjects( _objects );
                   var ray = _raycaster.ray;
                   var normal = ray.direction; // normal ray to the camera position
                   if ( intersects.length > 0 ) {
                       _selected = intersects[ 0 ];
                       _selected.ray = ray;
                       _selected.normal = normal ;
                       _offset.copy( _selected.point ).sub( _selected.object.position );
                       _domElement.style.cursor = 'move';
                       notify( 'dragstart', _selected );
                   }
               }
           |]
        =]

        event_handler mouseup [=
           name = "drag_controls.onmouseup"
           declare [/
               function onmouseup( event ) {
                   event.preventDefault();
                   if ( _selected ) {
                       notify( 'dragend', _selected );
                       _selected = null;
                   }
                   _domElement.style.cursor = 'auto';
               }
           |]
        =]

        event_handler mousemove [=
           name = "drag_controls.onmousemove"
           declare [/
               function onmousemove( event ) {
                   event.preventDefault();
                   _mouse.x = ( event.clientX / _domElement.width ) * 2 - 1;
                   _mouse.y = - ( event.clientY / _domElement.height ) * 2 + 1;
                   _raycaster.setFromCamera( _mouse, _camera );

                   var ray = _raycaster.ray;
                   if ( _selected && me.enabled ) {
                       var normal = _selected.normal;
                       var denom = normal.dot( ray.direction );
                       if ( denom == 0 ) {
                           console.log( 'no or infinite solutions' );
                           return;
                       }

                       var num = normal.dot( p3subp1.copy( _selected.point ).sub( ray.origin ) );
                       var u = num / denom;

                       targetposition.copy( ray.direction ).multiplyScalar( u ).add( ray.origin ).sub( _offset );

                       var xLock = [= xlock; =];
                       var yLock = [= ylock; =];
                       var zLock = [= zlock; =];
                       var moveX, moveY, moveZ;
                       if ( xLock ) {
                           moveX = true;
                           moveY = false;
                           moveZ = false;
                       } else if ( yLock ) {
                           moveX = false;
                           moveY = true;
                           moveZ = false;
                       } else {
                           moveX = moveY = moveZ = true;
                       }

                       if ( moveX ) {
                           _selected.object.position.x = targetposition.x;
                       }
                       if ( moveY ) {
                           _selected.object.position.y = targetposition.y;
                       }
                       if ( moveZ ) {
                           _selected.object.position.z = targetposition.z;
                       }

                       notify( 'drag', _selected );
                       return;
                   }

                  _raycaster.setFromCamera( _mouse, _camera );
                  var intersects = _raycaster.intersectObjects( _objects );
                  if ( intersects.length > 0 ) {
                      _domElement.style.cursor = 'pointer';
                      _hovered = intersects[ 0 ];
                      notify( 'hoveron', _hovered );
                  } else {
                      notify( 'hoveroff', _hovered );
                      _hovered = null;
                      _domElement.style.cursor = 'auto';
                  }

               }
           |]
        =]
 
        activate(cam_var) [/
            var [= id; =]_draggable_objs = [= s.draggable_objs; =] 
            var [= id; =]_drag_controls = new drag_controls([= cam_var; =], [= id; =]_draggable_objs);    
        |]

        this;
    =]
    
    

=]
